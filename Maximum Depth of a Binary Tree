# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        # if not root:  #root is null
        #     return 0
        # return 1+ max(self.maxDepth(root.left), self.maxDepth(root.right))
        #-----------------Following is the BFS implementation---------------------------------
#         if not root:
#             return 0
#         level=0
#         q= deque([root])
#         while q: #until the queue is empty
#             for i in range(len(q)):
#                 node= q.popleft()
#                 if node.left: 
#                     q.append(node.left)
#                 if node.right:
#                     q.append(node.right)
                    
#             level+=1 # basically counts the number of times the queue is non-empty
#         return level
        #-------------------Following is the iterative Depth First Search
    #the traversal is preorder-------------------------------
    
        
        stack = [[root,1]]
        res= 0
        while stack:
            node,depth = stack.pop()
            if node:
                res= max(res,depth)
                stack.append([node.left,depth+1])
                stack.append([node.right,depth+1])
        return res
    
