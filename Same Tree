#In this problem, we are checking from the root and gradually going downwards using Recursion by breaking the trees into the left subtree and the right subtree.
#1) root is checked for both the inputs
#2) left subtrees are checked for both the inputs
#3) right subtrees are checked for both the inputs
#4) Time complexity: O(p+q) == size of both the trees added together because in the worst case, have to iterate through every single node in both trees.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q: #both p and q are empty
            return True #empty trees are technically equal
        if not p or not q or p.val != q.val : # one of them is empty
            return False
        # if p.val != q.val: #both are non-empty
        #     return False
        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)
